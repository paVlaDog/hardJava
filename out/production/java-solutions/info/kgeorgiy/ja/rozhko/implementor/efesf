package info.kgeorgiy.ja.rozhko.implementor;

import info.kgeorgiy.java.advanced.implementor.Impler;
import info.kgeorgiy.java.advanced.implementor.ImplerException;
import info.kgeorgiy.java.advanced.implementor.JarImpler;

<<<<<<< HEAD
=======
import java.util.Arrays;
import java.util.jar.Manifest;
import javax.annotation.processing.Completions;
>>>>>>> fa69f0dc451d428d3f851938ac7818ff9e862fcc
import javax.tools.JavaCompiler;
import javax.tools.ToolProvider;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.*;
import java.net.URISyntaxException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.util.*;
import java.util.jar.Attributes;
import java.util.jar.JarOutputStream;
import java.util.jar.Manifest;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.zip.ZipEntry;

/**
 * Generator of {@code .java} and {@code .jar} files that extend provided Class or Interface,
 * implementation of {@link info.kgeorgiy.java.advanced.implementor.Impler} and
 * {@link info.kgeorgiy.java.advanced.implementor.JarImpler} interfaces.
 */
public class Implementor implements Impler, JarImpler {
    /** Contains a {@link System#lineSeparator()} value: the system-dependent line separator string.*/
    private static final String LINE_SEPARATOR = System.lineSeparator();
    /** Contains a {@link File#separatorChar} value: the system-dependent default name-separator character.*/
    private static final char FILE_SEPARATOR = '/';
    /** Contains a {@link File#pathSeparatorChar} value: the system-dependent path-separator character.*/
    private static final char PATH_SEPARATOR = File.pathSeparatorChar;

    /** Format string for implementing package description information.*/
    private static final String PACKAGE_FORMAT;
    /** Format string for implementing the declaration of class.*/
    private static final String DECLARATION_FORMAT;
    /** Format string for implementing the constructor.*/
    private static final String CONSTRUCTOR_FORMAT;
    /** Format string for implementing the method.*/
    private static final String METHOD_FORMAT;
    /** Format string for implementing information about exceptions a constructor or a method throws.*/
    private static final String EXCEPTIONS_FORMAT;
    /** Format string for implementing the return statement of a method.*/
    private static final String RETURN_FORMAT;
    static {
        PACKAGE_FORMAT = String.format("package %%s;%s%s", LINE_SEPARATOR, LINE_SEPARATOR);
        DECLARATION_FORMAT = String.format("class %%sImpl %%s %%s {%s", LINE_SEPARATOR);
        CONSTRUCTOR_FORMAT = String.format("\t%%s %%sImpl%%s %%s{%s\t\tsuper(%%s);%s\t}%s%s",
                LINE_SEPARATOR, LINE_SEPARATOR, LINE_SEPARATOR, LINE_SEPARATOR);
        METHOD_FORMAT = String.format("\t%%s %%s %%s%%s %%s{%%s}%s%s", LINE_SEPARATOR, LINE_SEPARATOR);
        EXCEPTIONS_FORMAT = String.format("%s\t\t\tthrows %%s ", LINE_SEPARATOR);
        RETURN_FORMAT = String.format("%s\t\treturn %%s;%s\t", LINE_SEPARATOR, LINE_SEPARATOR);
    }

    /** {@inheritDoc}*/
    @Override
<<<<<<< HEAD
    public void implement(final Class<?> token, final Path root) throws ImplerException {
        checkNonNull(token, "token");
        checkNonNull(root, "root path");
=======
    public void implement(Class<?> token, Path root) throws ImplerException {
        // :NOTE: хардкод Completions.class
        if (token.isPrimitive() || token.isArray() || token == java.lang.Enum.class || token == Completions.class) throw new ImplerException(token + "class don't implementable");
        if (Modifier.isPrivate(token.getModifiers())) throw new ImplerException("Private class don't implementable");
        if (Modifier.isFinal(token.getModifiers())) throw new ImplerException("Private class don't implementable");
>>>>>>> fa69f0dc451d428d3f851938ac7818ff9e862fcc

        int mod = token.getModifiers();
        if (token.isArray() || token.isPrimitive() || token.isEnum() || token.equals(Enum.class)
                || Modifier.isFinal(mod) || Modifier.isPrivate(mod)) {
            throw new ImplerException("provided token represents an unimplementable type");
        }

        final Path path = root.resolve(Path.of(String.format("%s.java", getFileName(token))));

        try {
            if (path.getParent() != null) {
                Files.createDirectories(path.getParent());
            }
            Files.deleteIfExists(path);
            Files.createFile(path);
        } catch (final IOException e) {
            throw new ImplerException("can't create file or its directories: " + e.getMessage());
        }

        try (BufferedWriter writer = Files.newBufferedWriter(path, StandardCharsets.UTF_8)) {
<<<<<<< HEAD
            implementCode(token, writer);
        } catch (final IOException e) {
            throw new ImplerException("error while writing to generated file: " + e.getMessage());
        }
    }

    /** {@inheritDoc}*/
=======
            // :NOTE: package ;
            writer.write(String.format("package %s;" + LN + LN + "public class %sImpl %s %s {" + LN, token.getPackageName(),
                    token.getSimpleName(), (token.isInterface() ? "implements " : "extends "), token.getCanonicalName()));
            for (Constructor<?> con : token.getDeclaredConstructors()) {
                if (Modifier.isPrivate(con.getModifiers())) continue;
                writer.write(String.format(TAB + "%s%sImpl (%s) %s {" + LN + TAB + TAB + "super(%s);" + LN + TAB + "}" + LN,
                        getModifiersStroke(con.getModifiers()), token.getSimpleName(),
                        getParametersStroke(con, true), getExceptionsStroke(con),
                        getParametersStroke(con, false)));
            }

            Set<TrueMethod> finalMethods = new HashSet<>();
            Set<TrueMethod> abstractMethods = new HashSet<>();
            // :NOTE: два сета не нужно - достаточно одного
            addExtendedMethod(token.getMethods(), finalMethods, abstractMethods);
            for (Class<?> iClass = token; iClass != null; iClass = iClass.getSuperclass()) {
                addExtendedMethod(iClass.getDeclaredMethods(), finalMethods, abstractMethods);
            }
            for (TrueMethod m : abstractMethods) {
                implementMethods(writer, m.getMethod());
            }
            writer.write("}");
        } catch (IOException e) {
            throw new ImplerException("Writer in " + path + " error");
        }
    }

    /**
     * Selects from the passed methods only those that can be implemented in the extended class
     *
     * @param methods a set of methods from which suitable ones will be selected
     * @param banMethods many methods that cannot be taken in response
     * @param ansMethods the set into which suitable methods will be added
     */

    private void addExtendedMethod(Method[] methods, Set<TrueMethod> banMethods, Set<TrueMethod> ansMethods) {
        for (Method m : methods) {
            if (Modifier.isFinal(m.getModifiers())) banMethods.add(new TrueMethod(m));
            if (!Modifier.isPrivate(m.getModifiers()) && Modifier.isAbstract(m.getModifiers()) &&
                    !banMethods.contains(new TrueMethod(m))) {
                ansMethods.add(new TrueMethod(m));
            }
        }
    }

    /**
     * Returns all constructor exceptions as a string in java code style.
     *
     * @param con constructor to get exceptions from
     * @return java style string with all exceptions in this constructor
     */

    private String getExceptionsStroke(Constructor<?> con) {
        StringBuilder exceptionsStroke = new StringBuilder();
        for (Class<?> cl : con.getExceptionTypes()) {
            exceptionsStroke.append(cl.getCanonicalName()).append(", ");
        }
        if (exceptionsStroke.length() > 0) {
            // :NOTE: использовать reduce
            exceptionsStroke.delete(exceptionsStroke.length() - 2, exceptionsStroke.length());
            return "throws " + exceptionsStroke;
        }
        return "";
    }

    /**
     * Returns all {@code Executable} element parameters as a string in java code style.
     *
     * @param el {@code Executable} element to get {@code Parameter} from
     * @param withType True if it is necessary to infer the types of the parameters and false otherwise
     * @return java style string with all Parameters in this {@code Executable} element
     * @see Executable
     * @see Parameter
     */

    private String getParametersStroke(Executable el, boolean withType) {
        StringBuilder paramStr = new StringBuilder();
        for (Parameter p : el.getParameters()) {
            if (withType) paramStr.append(p.getType().getCanonicalName()).append(" ");
            paramStr.append(p.getName()).append(", ");
        }
        if (paramStr.length() != 0) {
            paramStr.delete(paramStr.length() - 2, paramStr.length());
        }
        return paramStr.toString();
    }

    /**
     * Returns all modifiers as a string in java code style.
     *
     * @param modifiersCode code describing available modifiers
     * @return java style string with all modifiers in this modifiersCode
     */

    private String getModifiersStroke(int modifiersCode) {
        String ans = "";
        // :NOTE: использовать стандартные функции
        if (Modifier.isPublic(modifiersCode)) ans += "public ";
        if (Modifier.isProtected(modifiersCode)) ans += "protected ";
        if (Modifier.isStatic(modifiersCode)) ans += "static ";
        if (Modifier.isStrict(modifiersCode)) ans += "strict ";
        return ans;
    }

    /**
     * Returns method element parameters as a string in java code style and write in transferred writer
     *
     * @param writer the writer in which the method will be written
     * @param m writable method
     * @throws IOException when a writer error occurs
     */

    private void implementMethods(BufferedWriter writer, Method m) throws IOException {
        String methodStroke = String.format(TAB + "%s%s %s (%s) {" + LN + TAB + TAB + "%s" + LN + TAB + "}" + LN + LN,
                getModifiersStroke(m.getModifiers()), m.getReturnType().getCanonicalName(), m.getName(),
                getParametersStroke(m, true), getReturnTypeStroke(m.getReturnType())) ;
        writer.write(methodStroke);
    }

    /**
     * Returns returnType as a string in java code style for return in method.
     *
     * @param m return type, may be primitive
     * @return Returns a string like "return default-value". For void, it returns an empty string.
     */

    private String getReturnTypeStroke(Class<?> m) {
        if (!m.isPrimitive()) {
            return "return null;";
        }
        return switch (m.descriptorString()) {
            case "Z" -> "return false;";
            case "V" -> "";
            default -> "return 0;";
        };
    }

    /**
     * Produces <var>.jar</var> file implementing class or interface specified by provided <var>token</var>.
     * <p>
     * Generated class' name should be the same as the class name of the type token with <var>Impl</var> suffix
     * added.
     *
     * @param token   type token to create implementation for.
     * @param jarFile target <var>.jar</var> file.
     * @throws ImplerException when implementation cannot be generated.
     */

>>>>>>> fa69f0dc451d428d3f851938ac7818ff9e862fcc
    @Override
    public void implementJar(final Class<?> token, final Path jarFile) throws ImplerException {
        checkNonNull(token, "token");
        checkNonNull(jarFile, "jar file path");

        final JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        if (compiler == null) throw new ImplerException("this platform doesn't provide a java compiler");

        final Path temp;
        try {
            temp = Files.createTempDirectory(jarFile.toAbsolutePath().getParent(), "temp");
        } catch (final IOException e) {
            throw new ImplerException("can't create a temporary directory: " + e.getMessage());
        }

        implement(token, temp);

        final String name = getFileName(token);
        final String classpath;
        try {
            classpath = String.format("%s%c%s", temp, PATH_SEPARATOR,
                    Path.of(token.getProtectionDomain().getCodeSource().getLocation().toURI()));
        } catch (final URISyntaxException e) {
            throw new ImplerException("error converting URL to URI: " + e.getMessage());
        }
        if (0 != compiler.run(null, null, null,
                Stream.of(temp.resolve(Path.of(String.format("%s.java", name))).toString(), "-cp", classpath)
                        .toArray(String[]::new))) {
            throw new ImplerException("compilation failed");
        }

        Manifest manifest = new Manifest();
        manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0");
        try (JarOutputStream stream = new JarOutputStream(Files.newOutputStream(jarFile), manifest)) {
            String className = String.format("%s.class", name);
            stream.putNextEntry(new ZipEntry(className));
            Files.copy(temp.resolve(className), stream);
        } catch (final IOException e) {
            throw new ImplerException("" + e.getMessage());
        }

    }

    /**
     * Checks if the provided {@link Object} is {@code null}.
     * @param obj object to check.
     * @param type String that describes the obj.
     * @throws ImplerException if the object is null.
     */
    private void checkNonNull(final Object obj, final String type) throws ImplerException {
        if (obj == null) throw new ImplerException(String.format("%s can't be null", type));
    }

    /**
     * Generates a file path string based on its package and class name.
     * @param token type token to get file name of.
     * @return {@code String} of th generated file path.
     */
    private String getFileName(Class<?> token) {
        return String.format("%s%s%sImpl",
                token.getPackageName().replace(".", "/"), "/", token.getSimpleName());
    }


    /**
     * Generates code for a provided type token and writes in to the given {@link BufferedWriter}.
     * @param token type token to create implementation for.
     * @param writer BufferedWriter to write generated code to.
     * @throws IOException if an I/O error occurs while writing
     * @throws ImplerException if token represents an unimplementable class:
     * all declared constructors are private
     */
    private void implementCode(final Class<?> token, final BufferedWriter writer) throws IOException, ImplerException {
        final String packageName = token.getPackageName();
        final String tokenName = token.getSimpleName();
        if (packageName.length() > 0) {
            writer.write(String.format(PACKAGE_FORMAT, packageName));
        }
        writer.write(String.format(DECLARATION_FORMAT,
                tokenName, (token.isInterface() ? "implements" : "extends"), token.getCanonicalName()));
        if (!token.isInterface()) {
            final Set<Constructor<?>> constructors = getConstructors(token);
            if (constructors.isEmpty()) throw new ImplerException("can't implement a class without constructors");
            for (final Constructor<?> constructor : constructors) {
                implementConstructor(constructor, tokenName, writer);
            }
        }
        for (final Method method : getMethods(token)) {
            implementMethod(method, writer);
        }
        writer.write("}");
    }


    /**
     * Finds all implementable constructors of the provided {@code Class<?>}.
     * That includes all constructors implicitly or explicitly declared by the class represented by this {@code Class},
     * excluding the private constructors. These are public, protected and default (package) access constructors.
     * @param token a Class to find constructors of.
     * @return Set of implementable constructors.
     */
    private Set<Constructor<?>> getConstructors(final Class<?> token) {
        return Arrays.stream(token.getDeclaredConstructors())
                .filter(x -> !Modifier.isPrivate(x.getModifiers()))
                .collect(Collectors.toSet());
    }

    /**
     * Finds all implementable methods of the provided {@code Class<?>}.
     * <ul>
     *     <li>If {@code token} represents an interface type, returns all the public methods of the interface
     *     represented by {@code token}, including declared by the interface and inherited from superinterfaces.
     *     Does not contain any implicitly declared methods from {@code token}.</li>
     *     <li>If {@code token} represents a class type, returns all the non-private non-final abstract methods
     *     of the class represented by {@code token}, including inherited from superclasses and superinterfaces.</li>
     * </ul>
     * @param token a Class to find methods of.
     * @return Set of implementable methods.
     */
    private Set<Method> getMethods(final Class<?> token) {
        if (token.isInterface()) {
            return Set.of(token.getMethods());
        }
        final Set<MethodWrapper> set = new HashSet<>();
        for (Class<?> t = token; t != null; t = t.getSuperclass()) {
            Stream.concat(Arrays.stream(t.getDeclaredMethods()), Arrays.stream(t.getMethods()))
                    .filter(x -> {
                        int mod = x.getModifiers();
                        return Modifier.isAbstract(mod) && !(Modifier.isFinal(mod) || Modifier.isPrivate(mod));
                    })
                    .map(MethodWrapper::new)
                    .collect(Collectors.toCollection(() -> set));
        }
        return set.stream()
                .map(MethodWrapper::method)
                .collect(Collectors.toSet());
    }

<<<<<<< HEAD

    /**
     * Generates code for the provided {@link Constructor} of a {@link Class}
     * and writes in to the given {@link BufferedWriter}.
     * @param constructor the {@code Constructor} to implement.
     * @param name name of the class as given in the source code.
     * @param writer BufferedWriter to write generated code to.
     * @throws IOException if an I/O error occurs while writing.
     */
    private void implementConstructor(final Constructor<?> constructor, final String name, final BufferedWriter writer)
            throws IOException {
        writer.write(String.format(CONSTRUCTOR_FORMAT,
                getModifiersString(constructor), name, getParametersString(constructor),
                getExceptionTypesString(constructor),
                Arrays.stream(constructor.getParameters())
                        .map(Parameter::getName)
                        .collect(Collectors.joining(", "))));
    }

    /**
     * Generates code for the provided {@code Method} and writes in to the given {@code BufferedWriter}.
     * @param method the {@code Method} to implement.
     * @param writer {@code BufferedWriter} to write generated code to.
     * @throws IOException if an I/O error occurs while writing.
     */
    private void implementMethod(final Method method, final BufferedWriter writer) throws IOException {
        final Class<?> returnType = method.getReturnType();
        writer.write(String.format(METHOD_FORMAT,
                getModifiersString(method), returnType.getCanonicalName(),method.getName(),
                getParametersString(method), getExceptionTypesString(method),
                getReturnString(returnType)));
    }


    /**
     * Generates code of the provided {@code Executable} class' modifiers
     * excluding {@code abstract} and {@code transient} modifiers.
     * @param executable {@code Executable} class to get modifiers of.
     * @return {@code String} of the acceptable modifiers of the provided {@code Executable} class.
     */
    private String getModifiersString(final Executable executable) {
        final int mod = executable.getModifiers();
        return Modifier.toString(mod
                -(Modifier.isAbstract(mod) ? Modifier.ABSTRACT : 0)
                -(Modifier.isTransient(mod) ? Modifier.TRANSIENT : 0));
    }

    /**
     * Generates code for the provided {@code Executable} class' parameters.
     * @param executable {@code Executable} class to get parameters of.
     * @return {@code String} of all the parameters list of a {@code executable}.
     * Each parameter is represented by its type's canonical name and its name.
     * @see Class#getCanonicalName()
     * @see Parameter#getName()
     */
    private String getParametersString(final Executable executable) {
        return String.format("(%s)", Arrays.stream(executable.getParameters())
                .map(x -> String.format("%s %s", x.getType().getCanonicalName(), x.getName()))
                .collect(Collectors.joining(", ")));
    }

    /**
     * Generates code for the provided {@code Executable} class' exception types.
     * @param executable {@code Executable} class to get exception types of.
     * @return {@code String} of all the exceptions {@code executable} may throw.
     * Each exception type is represented by its name.
     */
    private String getExceptionTypesString(final Executable executable) {
        final Class<?>[] exceptions = executable.getExceptionTypes();
        return exceptions.length == 0 ? "" : String.format(EXCEPTIONS_FORMAT,
                Arrays.stream(exceptions)
                        .map(Class::getName)
                        .collect(Collectors.joining(", ")));
    }

    /**
     * Generates a code for the return statement String for a method.
     * @param returnType the type of the method's return value.
     * @return {@code String} of the return statement.
     * If the provided return type is {@code void}, returns an empty string.
     * Otherwise, returns a string containing {@code return} keyword and the default value for a given type.
     */
    private String getReturnString(final Class<?> returnType) {
        return (returnType.equals(void.class) ? "" :
                String.format(RETURN_FORMAT,
                        returnType.equals(boolean.class) ? "false" : (returnType.isPrimitive() ? "0" : "null")));
    }


    /**
     * A wrapper for the {@link Method} to override their {@link Method#equals} and {@link Method#hashCode} methods.
     * Only compares {@code methods} by their names, formal parameter types and return types,
     * ignoring the declaring class.
     * @param method a {@code Method} to wrap.
     * @see Method#equals(Object)
     * @see Method#hashCode()
     */
    private record MethodWrapper(Method method) {
        /**
         * Compares this MethodWrapper against the specified object. Returns true if the objects are the same.
         * Two MethodWrappers are the same if their Methods have the same name, formal parameter types
         * and the return type.
         * @param obj the reference object with which to compare.
         * @return {@code true} if this method is equal to the obj argument; {@code false} otherwise
         */
        @Override
        public boolean equals(final Object obj) {
            if (obj instanceof MethodWrapper other) {
                Method otherMethod = other.method();
                return method.getName().equals(otherMethod.getName())
                        && method.getReturnType().equals(otherMethod.getReturnType())
                        && Arrays.equals(method.getParameterTypes(), otherMethod.getParameterTypes());
            }
            return false;
        }

        /**
         * Calculates a hashcode for this {@code MethodWrapper}.
         * The hashcode is computed as the hash of the hashcodes for the underlying method's name and parameter types.
         * @return calculated hashcode.
         */
        @Override
        public int hashCode() {
            return Objects.hash(method.getName(), Arrays.hashCode(method.getParameterTypes()));
=======
    private void compileJava(Class<?> token, Path path, String classPath) throws ImplerException {
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        // :NOTE: компилятору нужно указывать кодировку
        String[] args = new String[]{"-cp", path + File.pathSeparator + classPath,
                path.resolve(getNameWithPackage(token, File.separator) + ".java").toString()};
        if (compiler == null || compiler.run(null, null, null, args) != 0) {
            throw new ImplerException("failed to compile generated file");
>>>>>>> fa69f0dc451d428d3f851938ac7818ff9e862fcc
        }
    }


<<<<<<< HEAD
    /**
     * Command line interface for {@code Implementor}.
     * <ul>
     *     <li>In the first mode, if two arguments are provided specifying a {@code Class<?> token} and
     *     a directory, generates an implementation of the {@code token} and places it in a given directory,
     *     using {@link Implementor#implement(Class, Path)}.</li>
     *     <li>In the second mode, if the first argument is {@code String} "-jar", and next two arguments are same
     *     as before, generates an implementation of the {@code token} and places it in a given directory
     *     in a ".jar" file,using {@link Implementor#implementJar(Class, Path)}.</li>
     * </ul>
     * @param args the command line parameters.
     */
    public static void main(final String[] args) {
        if (args == null || !(args.length == 2 || args.length == 3 && args[0].equals("-jar"))) {
            System.err.println("provided arguments are not supported");
            return;
        }
        final boolean jar = args.length == 3;
        try {
            final Class<?> token = Class.forName(args[jar ? 1 : 0]);
            final Path root = Path.of(args[jar ? 2 : 1]);
            final Implementor implementor = new Implementor();
            if (jar) implementor.implementJar(token, root);
            else implementor.implement(token, root);
        } catch (final InvalidPathException e) {
            System.err.println("couldn't convert path string to path: " + e.getMessage());
        } catch (final ClassNotFoundException e) {
            System.err.println("couldn't find the class by the provided name: " + e.getMessage());
        } catch (final ImplerException e) {
            System.err.println("implementation failed: " + e.getMessage());
=======
    private void createJar(Class<?> token, Path jarPath, Path classDir, String classPath) throws ImplerException {
//        Manifest man = new Manifest();
//        man.getMainAttributes().put("Class-Path", classPath);
        try (JarOutputStream out = new JarOutputStream(Files.newOutputStream(jarPath))) {
            out.putNextEntry(new ZipEntry("MANIFEST.MF"));
            out.write(("Manifest-Version: 1.0\n" + "Class-Path: " + classPath).getBytes(StandardCharsets.UTF_8));
            String name = getNameWithPackage(token, "/") + ".class";
            out.putNextEntry(new ZipEntry(name));
            Files.copy(classDir.resolve(name), out);
        } catch (IOException e) {
            throw new ImplerException("Error occurred while creating jar file");
>>>>>>> fa69f0dc451d428d3f851938ac7818ff9e862fcc
        }
    }
}